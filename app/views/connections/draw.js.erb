var server_id = '<%= @server.id %>'

$("#draw_connections_link_" + server_id + " button").html('<span class="bi bi-shuffle" aria-hidden="true"></span>')
$("#draw_connections_link_" + server_id + " button").toggleClass('btn-warning')
$("#back_server_" + server_id).toggleClass('connections-activated')

var currently_activated_servers = currently_activated_servers || {} // server => ports
var currently_connected_ports = currently_connected_ports || {} // port => servers
var currently_activated_connections = currently_activated_connections || [] // activated ports, grouped by connection

if (exists(currently_activated_servers[server_id])) { // TOGGLE
    delete_lines(server_id)
    log("currently_activated_servers", currently_activated_servers)
    log("currently_connected_ports", currently_connected_ports)
    log("currently_activated_connections", currently_activated_connections)
} else {
    currently_activated_servers[server_id] = currently_activated_servers[server_id] || {}
    create_lines(server_id)
    log("currently_activated_servers", currently_activated_servers)
    log("currently_connected_ports", currently_connected_ports)
    log("currently_activated_connections", currently_activated_connections)
}

function create_lines(server_id) {
    // First, set potential twin card data
    var twin_card_data = get_twin_cards()

    <% @server.ports.each do |port| %>
    <% if port.paired_connection.present? %>
    create_line(server_id,
        '<%= port.id %>',
        '<%= port.paired_connection.port_id %>',
        '<%= port.cable_color %>',
        '<%= port.cable_name %>',
        twin_card_data['<%= port.id %>']
    )
    <% end %>
    <% end %>
}

function get_twin_cards() {
    var twin_cards = {}
    <% @connections_through_twin_cards.each do |port_id, data_by_port| %>
    twin_cards['<%= port_id %>'] = {
        twin_card_port_id: <%= data_by_port[:twin_card_port_id] %>,
        twin_card_paired_port_id: <%= data_by_port[:twin_card_paired_port_id] %>,
        cable_color: '<%= data_by_port[:cable_color] %>',
        cable_name: '<%= data_by_port[:cable_name] %>'
    }
    <% end %>
    return twin_cards
}

function create_line(server_id, port_id, destination_port_id, cable_color, cable_name, twin_card_data) {
    var elt_start = document.getElementById(port_id)
    var elt_end = document.getElementById(destination_port_id)
    if (each_exists([elt_start, elt_end])) {

        var line = find_or_create_leader_line(elt_start, elt_end, cable_name, colors_hash[cable_color], destination_port_id)

        // Twin card line
        if (exists(twin_card_data)) {
            var twin_elt_start = document.getElementById(twin_card_data['twin_card_port_id'])
            var twin_elt_end = document.getElementById(twin_card_data['twin_card_paired_port_id'])
            if (each_exists([twin_elt_start, twin_elt_end])) {
                var twin_line = create_leader_line(twin_elt_start, twin_elt_end, twin_card_data['cable_name'], colors_hash[twin_card_data['cable_color']])
            }
        }

        var ports_elts = compact([elt_start, elt_end, twin_elt_start, twin_elt_end])

        removePreviousEventListeners(ports_elts)
        addNewEventListeners(ports_elts, compact([line, twin_line]))

        save_connected_ports_state(ports_elts, server_id)
        save_activated_servers_state(server_id, port_id, [line, twin_line])

        show_lines([line, twin_line])
    }
}

function find_or_create_leader_line(elt_start, elt_end, cable_name, cable_color, destination_port_id) {
    if (exists(currently_connected_ports[destination_port_id])) {
        destination_server_id = currently_connected_ports[destination_port_id][0]
        current_lines = currently_activated_servers[destination_server_id][destination_port_id]
        return current_lines[0]
    } else {
        return create_leader_line(elt_start, elt_end, cable_name, cable_color)
    }
}

function addNewEventListeners(ports_elts, lines) {
    ports_elts.forEach(function (port_elt) {
        $(port_elt).on('click.port', {ports_elts: ports_elts, lines: lines}, handleClickOnPort)
        $(port_elt).on('mouseenter.port', {
            lines: lines,
            ports_elts: ports_elts,
            switcher: true
        }, highlightLinesEvent)
        $(port_elt).on('mouseleave.port', {
            lines: lines,
            ports_elts: ports_elts,
            switcher: false
        }, highlightLinesEvent)
    })
}

function highlightLinesEvent(e) {
    highlightLines(e.data.lines, e.data.ports_elts, e.data.switcher)
}
function highlightLines(lines, ports_elts, switcher) {
    lines.forEach(function (line) {
        set_line_options(line, switcher ? 'hover' : 'leave')
    })
    outline_elements(ports_elts, switcher)
}

function outline_elements(elts, status) {
    status ? $(elts).addClass('outlined') : $(elts).removeClass('outlined')
}

function removePreviousEventListeners(ports_elts) {
    $(ports_elts).off('.port')
}

function handleClickOnPort(e) {
    if (exists(currently_connected_ports[e.target.id])) {
        e.preventDefault()
        e.stopPropagation()
        if (index_in(currently_activated_connections, e.target.id) >= 0) {
            // log("DESACTIVATE CONNECTION")
            highlightLines(e.data.lines, e.data.ports_elts, false)
            $(e.data.ports_elts).on('mouseleave.port', {
                lines: e.data.lines,
                ports_elts: e.data.ports_elts,
                switcher: false
            }, highlightLinesEvent)
            remove_from_activated_connections(e.target.id)
        } else {
            // log("ACTIVATE CONNECTION")
            highlightLines(e.data.lines, e.data.ports_elts, true)
            $(e.data.ports_elts).off('mouseleave.port')
            add_to_activated_connections(ids_of(e.data.ports_elts))
        }
    } else {
        return true // Do not prevent default ; Do not stop propagation
    }
}

function show_lines(lines) {
    lines.forEach(function (line) {
        if (line) {
            line.show()
        }
    })
}

function save_activated_servers_state(server_id, port_id, lines) {
    currently_activated_servers[server_id][port_id] = currently_activated_servers[server_id][port_id] || []
    lines.forEach(function (line) {
        if (line) {
            currently_activated_servers[server_id][port_id].push(line)
        }
    })
}

function save_connected_ports_state(ports_elts, server_id) {
    ports_elts.forEach(function (port_elt) {
        let port_id = port_elt.id
        currently_connected_ports[port_id] = currently_connected_ports[port_id] || []
        currently_connected_ports[port_id].push(server_id)
        currently_connected_ports[port_id] = uniq(currently_connected_ports[port_id])
    })
}

function index_in(array_of_arrays, value) {
    for (var index in array_of_arrays) {
        let array = array_of_arrays[index]
        if (array.indexOf(value) >= 0) {
            return array_of_arrays.indexOf(array)
        }
    }
    return -1
}

function add_to_activated_connections(elts_ids) {
    currently_activated_connections.push(elts_ids)
}

function remove_from_activated_connections(elt_id) {
    index = index_in(currently_activated_connections, elt_id)
    if (index >= 0) {
        currently_activated_connections[index].forEach(function (port_id) {
            $('#' + port_id + '.port').removeClass('outlined')
        })
        currently_activated_connections.splice(index, 1)
    }
}

function set_line_options(line, status) {
    if (status === 'hover') {
        line.dash = {animation: true}
        line.size = 4
        // line.startPlug = 'square'
        // line.endPlug = 'square'
        // line.startPlugColor = '#f0ad4e'
        // line.endPlugColor = '#f0ad4e'
    } else {
        line.dash = false
        line.size = 2
        // line.startPlug = 'behind'
        // line.endPlug = 'behind'
    }
}

function delete_lines(server_id) {
    var ports = currently_activated_servers[server_id]
    for (var port_id of Object.keys(ports)) {
        clear_currently_connected_ports(server_id)
        delete ports[port_id]
    }
    delete currently_activated_servers[server_id]
}

function clear_currently_connected_ports(server_id) {
    for (var port_id of Object.keys(currently_connected_ports)) {
        server_id_index = currently_connected_ports[port_id].indexOf(server_id.toString())
        if (server_id_index >= 0) {
            currently_connected_ports[port_id].splice(server_id_index, 1)
        }
        if (currently_connected_ports[port_id].length == 0) {
            removePreviousEventListeners($('#' + port_id + '.port'))
            delete currently_connected_ports[port_id]
            remove_from_activated_connections(port_id)
            var lines = currently_activated_servers[server_id][port_id]
            if (exists(lines)) {
                lines.forEach(function (line) {
                    line.hide()
                    delete line
                })
            }
        }
    }

}

function delete_all_lines() {
    for (var server_id of Object.keys(currently_activated_servers)) {
        delete_lines(server_id)
    }
}

function create_leader_line(elt_start, elt_end, cable_name, cable_color) {
    return new LeaderLine(
        elt_start,
        elt_end,
        {
            color: cable_color,
            size: 2,
            // middleLabel: cable_name,
            endPlug: 'behind',
            endSocket: 'auto',
            path: 'fluid',
            hide: true
        }
    )
}
