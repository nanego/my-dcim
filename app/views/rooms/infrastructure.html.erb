<% provide :title, "Vue infrastructure" %>

<%= render 'layouts/breadcrumb', breadcrumb_variables: {t("visualization") => overview_rooms_path, 'Infrastructure' => nil} %>

<div class="container-fluid room_overview show_room" id="full-overview">
  <div class="panel panel-default">
    <div class="panel-body" style="display: flex;">

      <ul class="list-unstyled col-xs-2 hidden-sm menu-rooms">

        <div class="btn-group-vertical btn-toggle">
          <% Modele::Network::TYPES.each do |type| %>
            <button class="<%= class_names("btn", "btn-primary active": (type == "gbe"), "btn-default": (type != "gbe")) %>" data-toggle="tab" role="tab" data-network="<%= type %>">
              <%= Modele.human_attribute_name("network_types.#{type}") %>
            </button>
          <% end %>
          <!-- <button class="btn btn-primary active" data-toggle="tab" role="tab" data-network="1">Réseau Gb</button> -->
          <!-- <button class="btn btn-default" data-toggle="tab" role="tab" data-network="2">Réseau 10Gb</button> -->
        </div>

        <li class="divider" style="border-bottom: 1px lightgray solid;margin:10px -10px 8px -10px;"></li>

        <% @sites.each do |site| %>
          <li><%= site %></li>
          <ul>
            <% rooms = site.rooms.sorted.distinct %>
            <% rooms.each do |room| %>
              <% islets = room.islets.sorted.not_empty.has_name.distinct %>
              <% islets.each do |islet| %>
                <li role="presentation" class="<%= 'active' if islet == @islet %>">
                  <% if islets.size <= 1 %>
                    <a href="#<%= room.id %>-<%= islet %>-1"
                       onclick="rewriteURL('/rooms/infrastructure', {'room': '<%= room.slug %>', 'islet': ''})"
                       aria-controls="room-<%= room %>"
                       role="tab"
                       class="tab"
                       data-toggle="tab"
                       data-room-id="<%= room.id %>"
                       data-islet="<%= islet.name %>">
                      <%= room.name %>
                    </a>
                  <% else %>
                    <a href="#<%= room.id %>-<%= islet %>-1"
                       onclick="rewriteURL('/rooms/infrastructure', {'room': '<%= room.slug %>', 'islet': '<%= islet.name %>'})"
                       aria-controls="islet-<%= islet %>"
                       role="tab"
                       class="tab"
                       data-toggle="tab"
                       data-room-id="<%= room.id %>"
                       data-islet="<%= islet.name %>">
                      <%= room.name %> Ilot <%= islet.name %>
                    </a>
                  <% end %>
                </li>
              <% end %>
              <% if islets.empty? %>
                <li><%= room.name %></li>
              <% end %>
            <% end %>
          </ul>
        <% end %>

        <li class="divider" style="border-bottom: 1px lightgray solid;margin:10px -10px 8px -10px;"></li>

        <div id="stack-selector">
          Stacks :
          <% @stacks.each do |stack| %>
            <%= check_box_tag "stack", stack.id, 1, value: "##{stack.color}" %>
            <span style="margin-right: 5px;<%= "color: ##{stack.try(:color)}" %>" class="glyphicon glyphicon-stop" aria-hidden="true"></span>
          <% end %>
        </div>

      </ul>

      <div class="tab-content col-xs-10 infrastructure">
        <% @sites.each do |site| %>
          <% site.rooms.each do |room| %>
            <% room.islets.sorted.each do |islet| %>
              <% Modele::Network::TYPES.each do |network| %>
                <%= render 'infrastructure_islet', islet: islet, room: room, network: network %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      </div>

    </div>
  </div>
</div>

<script>
    var current_room_id = "<%= @room&.id %>"
    var current_islet = "<%= @islet&.name %>"
    var lines = []
    var current_connections = []

    $(document).ready(function () {
        drawCurrentLines()
    })

    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        // log(e.target.dataset)
        current_room_id = e.target.dataset['roomId']
        current_islet = e.target.dataset['islet']
        // log(current_room_id)
        // log(current_islet)
        resetLines()
    })
    $('body').on('click', 'input:checkbox[name=stack]', function (e) {
        resetLines()
    })

    function disabled_colors() {
        return $('input:checkbox[name=stack]:not(:checked)').map(function () {
            return this.value;
        }).get()
    }

    function resetLines() {
        deleteOldLines()
        drawCurrentLines()
    }

    function deleteOldLines() {
        console.log("DELETE ALL LINES")
        lines.forEach(function (line) {
            line.hide()
        })
        lines = []
        current_connections = []
    }

    function drawCurrentLines() {
        console.log("CREATE LINES")
        var disabled_stacks = disabled_colors()
        log(disabled_stacks)
        <% @connections.each do |server_id, connections| %>
          <% connections.each do |connection| %>
            <% unless @concentrateurs_ids.include?(connection[:server_id]) && @concentrateurs_ids.exclude?(server_id)  %>
              if(disabled_stacks.indexOf(colors_hash['<%= connection[:cable_color] %>']) < 0) {
                  drawInterSwitchsConnections('<%= server_id %>', '<%= connection[:server_id] %>', '<%= connection[:cable_color] %>')
              }
            <% end %>
          <% end %>
        <% end %>
    }

    function drawLine(startElement, endElement, params) {
        if (startElement && endElement) {
            lines.push(new LeaderLine(startElement, endElement, params))
        }
    }

    function drawInterSwitchsConnections(start_id, end_id, color) {
        if (start_id != end_id && current_connections.indexOf(end_id + "-" + start_id) < 0) {
            var start_element = $('.server_' + start_id + ':visible')[0]
            var end_element = $('.server_' + end_id + ':visible')[0]
            // var start_anchor = LeaderLine.pointAnchor(start_element, {x: 42 + i * 20, y: 57})
            // var end_anchor = LeaderLine.pointAnchor(end_element, {x: 42 + i * 20, y: 0})
            if (start_element && end_element) {
                setParamsAndDraw(start_element, end_element, color)
                if (!$(start_element).hasClass('hub_material')) {
                    current_connections.push(start_id + "-" + end_id)
                }
                log(start_id + ' <-> ' + end_id)
            }
        }
    }

    function setParamsAndDraw(start_element, end_element, color) {
        var params

        if (color) {
            color = colors_hash[color]
        } else {
            color = 'gray'
        }

        if ($(start_element).hasClass('hub-top') && !($(end_element).hasClass('hub-bottom')) ||
            $(start_element).hasClass('hub-bottom') && !($(end_element).hasClass('hub-top'))) {
            // HUB TO SWITCHS
            end_element = LeaderLine.pointAnchor(end_element, {x: 5, y: 0})
            params = {
                path: 'fluid',
                startPlug: 'behind',
                endPlug: 'behind',
                startSocket: 'bottom',
                endSocket: 'top',
                color: color,
                size: 3,
                dash: true
            }
        }

        if ($(start_element).hasClass('lane-1') && $(end_element).hasClass('lane-1') ||
            $(start_element).hasClass('lane-2') && $(end_element).hasClass('lane-2')) {
            // SWITCH TO SWITCH - SAME LINE
            params = {
                path: 'fluid',
                startPlug: 'behind',
                endPlug: 'behind',
                startSocket: 'bottom',
                endSocket: 'bottom',
                color: color,
                size: 2,
                dash: false
            }
        }

        if ($(start_element).hasClass('hub-top') && ($(end_element).hasClass('hub-bottom')) ||
            $(start_element).hasClass('hub-bottom') && ($(end_element).hasClass('hub-top'))) {
            // HUB TO HUB
            if ($(start_element).hasClass('hub-top')) {
                start_element = LeaderLine.pointAnchor(start_element, {x: $(start_element).outerWidth(), y: 19})
                end_element = LeaderLine.pointAnchor(end_element, {x: 0, y: 19})
            } else {
                start_element = LeaderLine.pointAnchor(start_element, {x: 0, y: 38})
                end_element = LeaderLine.pointAnchor(end_element, {x: $(end_element).outerWidth(), y: 38})
            }
            params = {
                path: 'straight',
                startPlug: 'behind',
                endPlug: 'behind',
                color: color,
                size: 2
            }
        }

        // Default
        if (!params) {
            log(start_element)
            log(end_element)
            params = {
                path: 'arc',
                startPlug: 'behind',
                endPlug: 'behind',
                startSocket: 'top',
                endSocket: 'bottom',
                color: color,
                size: 2
            }
        }

        drawLine(start_element, end_element, params)
    }

    // Network switcher
    $('.btn-toggle').click(function (e) {
        e.preventDefault()
        // Update switcher state
        var btn_group = $(this)
        btn_group.find('.btn').toggleClass('active')
        btn_group.find('.btn').toggleClass('btn-primary')
        btn_group.find('.btn').toggleClass('btn-default')
        // Update all tabs links with newly selected network AND show this network
        var current_tab = $('.show_room li.active a.tab:first')
        var tabs = $('.show_room li a.tab')
        tabs.each(function () {
            $(this).prop("href", $(this).attr('href').slice(0, -2) + "-" + btn_group.find('.btn.active').data("network"))
            $(this).parent('li').removeClass('active')
        })
        current_tab.tab('show')
    })
    // Room selection
    $('.show_room li a.tab').click(function (e) {
        e.preventDefault()
        var tabs = $('.show_room li a.tab')
        tabs.each(function () { // Remove all active class
            $(this).parent('li').removeClass('active')
        })
        $(this).tab('show')
    })

</script>
