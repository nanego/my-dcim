<% view_side = Frame.view_sides[:front] if local_assigns[:view_side].blank? %>

<span class="d-flex flex-wrap gap-2 flex-column flex-lg-row">
  <% if view_side != Frame.view_sides[:back] %>
    <!-- Choice of server background color -->
    <div class="btn-group">
      <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <%= t(".background_color", bg: params[:bg].presence || current_user.visualization_bay_default_background_color || Modele.model_name.human.downcase) %>
      </button>
      <ul class="dropdown-menu">
        <li><%= link_to Modele.model_name.human, url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: Modele.model_name.human.downcase, islet: params[:islet], id: params[:id]})), class: "dropdown-item", remote: true  %></li>
        <li><%= link_to Gestion.model_name.human, url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: Gestion.model_name.human.downcase, islet: params[:islet], id: params[:id]})), class: "dropdown-item", remote: true  %></li>
        <li><%= link_to Cluster.model_name.human, url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: Cluster.model_name.human.downcase, islet: params[:islet], id: params[:id]})), class: "dropdown-item", remote: true  %></li>
      </ul>
    </div>
  <% end %>

  <!-- Views FRONT / BACK -->
  <% if view_side==Frame.view_sides[:both] %>
     <%= content_tag :div, class: 'btn btn-sm btn-primary disabled' do %>
      <%= Frame.human_attribute_name("view_sides.both") %>
    <% end %>
  <% else %>
    <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => (view_side == Frame.view_sides[:back] ? Frame.view_sides[:front] : Frame.view_sides[:back]), islet: params['islet'], id: params['id']})), class: 'btn btn-sm btn-outline-primary', remote: true do %>
      <span class="bi bi-back" aria-hidden="true"></span>
      <%= Frame.human_attribute_name("view_sides.#{view_side}") %>
    <% end %>
  <% end %>

  <%= link_to "#", class: 'btn btn-sm btn-primary', id: 'drag-n-drop-switcher' do %>
    <span class="bi bi-arrows-move" aria-hidden="true"></span>
    <%= t(".dragn_drop.enable") %>
  <% end %>

  <% if formats!=[:pdf] && @room.present? && !@room.kind_of?(String) %>
    <div class="btn-group">
      <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <%= t("export_button.label") %>
      </button>
      <ul class="dropdown-menu dropdown-menu-end">
        <li>
          <h6 class="dropdown-header"><%= t("export_button.exports.pdf") %></h6>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :pdf, view: :front })),
                      target: :_blank,
                      class: "dropdown-item" do %>
            <span class="bi bi-file-earmark-pdf" aria-hidden="true"></span>
            <%= t("export_button.faces.front") %>
          <% end %>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :pdf, view: :back })),
                      class: "dropdown-item",
                      target: :_blank do %>
            <span class="bi bi-file-earmark-pdf" aria-hidden="true"></span>
            <%= t("export_button.faces.back") %>
          <% end %>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :pdf, view: :front, bg: :cablage })),
                      class: "dropdown-item",
                      target: :_blank do %>
            <span class="bi bi-file-earmark-pdf" aria-hidden="true"></span>
            <%= t("export_button.faces.front_wiring") %>
          <% end %>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :pdf, view: :back, bg: :cablage })),
                      class: "dropdown-item",
                      target: :_blank do %>
            <span class="bi bi-file-earmark-pdf" aria-hidden="true"></span>
            <%= t("export_button.faces.back_wiring") %>
          <% end %>
        </li>

        <li><hr class="dropdown-divider"></li>

        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :txt })),
                      class: "dropdown-item" do %>
          <span class="bi bi-file-earmark-text" aria-hidden="true"></span>
            <%= t("export_button.exports.txt") %>
          <% end %>
        </li>

        <li>
          <%= link_to url_for(params.except(:controller, :action)
                                    .permit(:view, :islet, :id, :bg, :format)
                                    .merge({ format: :pdf, debug: '1' })),
                      class: "dropdown-item",
                      target: :_blank do %>
          <span class="bi bi-printer" aria-hidden="true"></span>
            <%= t("export_button.exports.print") %>
          <% end %>
        </li>

        <li><hr class="dropdown-divider"></li>

        <li>
          <%= link_to ports_path(room_id: @room.id, frame_id: @frame.try(:id)), class: "dropdown-item" do %>
          <span class="bi bi-card-list" aria-hidden="true"></span>
            <%= t("export_button.port_list") %>
          <% end %>
        </li>
      </ul>
    </div>
  <% end %>

  <%= render CaptionComponent.new do %>
    <h5><%= t(".caption.ports")%> :</h5>
    <dl>
      <dt>
        <span class="pdu port_container unreferenced_client">
          <a class="port portFC empty">01</a>
        </span>
      </dt>
      <dd><%= t(".caption.unreferenced_client")%></dd>
      <dt>
        <span class="pdu port_container no_client">
          <a class="port portFC empty">02</a>
        </span>
      </dt>
      <dd><%= t(".caption.no_client")%></dd>
    </dl>
  <% end %>
</span>
