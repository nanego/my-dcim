<% view_side = Frame.view_sides[:front] if local_assigns[:view_side].nil? %>

<span class="pull-right" style="margin-top: 10px">

  <% if view_side != Frame.view_sides[:back] %>
    <!-- Choice of server background color -->
    <div class="btn-group">
      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <%= t(".background_color", bg: params[:bg] || 'modÃ¨le') %> <span class="caret"></span>
      </button>
      <ul class="dropdown-menu">
        <li><%= link_to t(".background_choices.modele"), url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: 'modele', islet: params[:islet], id: params[:id]})), remote: true  %></li>
        <li><%= link_to t(".background_choices.manager"), url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: 'gestionnaire', islet: params[:islet], id: params[:id]})), remote: true  %></li>
        <li><%= link_to t(".background_choices.cluster"), url_for( params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => 'front', bg: 'cluster', islet: params[:islet], id: params[:id]})), remote: true  %></li>
      </ul>
    </div>
  <% end %>

  <!-- Views FRONT / BACK -->
  <% if view_side==Frame.view_sides[:both] %>
     <%= content_tag :div, class: 'btn btn-default disabled' do %>
      <%= t(".views.back_front") %>
    <% end %>
  <% else %>
    <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({:view => (view_side == Frame.view_sides[:back] ? Frame.view_sides[:front] : Frame.view_sides[:back]), islet: params['islet'], id: params['id']})), class: 'btn btn-success', remote: true do %>
      <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
      <%= (view_side==Frame.view_sides[:back] ? t(".views.front") : t(".views.back")) %>
    <% end %>
  <% end %>

  <%= link_to "#", class: 'btn btn-danger', id: 'drag-n-drop-switcher' do %>
    <span class="glyphicon glyphicon-move" aria-hidden="true"></span>
    <%= t(".dragn_drop.enable") %>
  <% end %>

  <% if formats!=[:pdf] && @room.present? && !@room.kind_of?(String) %>
    <div class="btn-group">
      <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <%= t("export_button.label") %> <span class="caret"></span>
      </button>
      <ul class="dropdown-menu dropdown-menu-right">
        <li class="dropdown-submenu pull-left">
          <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf'})), target: :_blank do %>
            <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
            <%= t("export_button.exports.pdf") %>
          <% end %>
          <ul class="dropdown-menu dropdown-menu-left">
            <li>
              <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf', 'view' => 'front'})), target: :_blank do %>
                <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                <%= t("export_button.faces.front") %>
              <% end %>
            </li>
            <li>
              <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf', 'view' => 'back'})), target: :_blank do %>
                <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                <%= t("export_button.faces.back") %>
              <% end %>
            </li>
            <li>
              <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf', 'view' => 'front', 'bg' => 'cablage'})), target: :_blank do %>
                <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                <%= t("export_button.faces.front_wiring") %>
              <% end %>
            </li>
            <li>
              <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf', 'view' => 'back', 'bg' => 'cablage'})), target: :_blank do %>
                <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                <%= t("export_button.faces.back_wiring") %>
              <% end %>
            </li>
          </ul>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'txt'})) do %>
          <span class="glyphicon glyphicon-text-background" aria-hidden="true"></span>
            <%= t("export_button.exports.txt") %>
          <% end %>
        </li>
        <li>
          <%= link_to url_for(params.except(:controller, :action).permit(:view, :islet, :id, :bg, :format).merge({'format' => 'pdf', 'debug' => '1'})), target: :_blank do %>
          <span class="glyphicon glyphicon-print" aria-hidden="true"></span>
            <%= t("export_button.exports.print") %>
          <% end %>
        </li>
        <li role="separator" class="divider"></li>
        <li>
          <%= link_to ports_path(room_id: @room.id, frame_id: @frame.try(:id)) do %>
          <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span>
            <%= t("export_button.port_list") %>
          <% end %>
        </li>
      </ul>
    </div>
  <% end %>

  <%= render CaptionComponent.new do %>
    <h5><%= t(".caption.ports")%> :</h5>
    <dl>
      <dt>
        <span class="pdu port_container unreferenced_client">
          <a class="port portFC empty">01</a>
        </span>
      </dt>
      <dd><%= t(".caption.unreferenced_client")%></dd>
      <dt>
        <span class="pdu port_container no_client">
          <a class="port portFC empty">02</a>
        </span>
      </dt>
      <dd><%= t(".caption.no_client")%></dd>
    </dl>
  <% end %>
</span>
