<% breadcrumb.add_step(@room.name) %>

<%= render Page::HeadingShowComponent.new(
  resource: @room,
  title: "#{Room.model_name.human} #{@room.name}",
  breadcrumb:,
  editable: allowed_to?(:update?, @room)
) do |heading| %>
  <% heading.with_extra_buttons do %>
   <% render ButtonComponent.new(
     t("visualization.title"),
    url: visualization_room_path(@room),
    variant: :primary,
    icon: "diagram-3-fill",
    is_responsive: true,
    extra_classes: "me-2"
   ) if allowed_to?(:show?, @room, with: Visualization::RoomPolicy) %>
  <% end %>
<% end %>

<div class="col-12 p-4 border-top">
  <div class="row row-cols-1 row-cols-lg-2 row-gap-4">
    <div class="col">
      <%= render CardComponent.new do |card| %>
        <% card.with_header do %>
          <%= t("show.cards.identification") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <% %i[name description].each do |attribute_name| %>
            <dt class="pb-2"><%= Room.human_attribute_name(attribute_name) %></dt>
            <dd class="mb-0 pb-2 ps-3"><%= @room.public_send(attribute_name) %></dd>
          <% end %>
        </dl>
      <% end %>

      <%= render CardComponent.new(extra_classes: "mt-4") do |card| %>
        <% card.with_header do %>
          <%= t("show.cards.features") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Room.human_attribute_name(:surface_area) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <%= surface_area_with_suffix(@room.surface_area) %>
          </dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:access_control) %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= @room.decorated.access_control_to_human %></dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:network_cluster_ids) %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= @room.decorated.network_clusters_to_sentence %></dd>
        </dl>
      <% end %>
    </div>

    <div class="col">
      <%= render CardComponent.new(type: :primary) do |card| %>
        <% card.with_header do %>
          <%= t("layouts.sidebar.location.title") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Site.model_name.human %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= link_to @room.site, site_path(@room.site) %></dd>
        </dl>
      <% end %>

      <%= render CardComponent.new(extra_classes: "mt-4") do |card| %>
        <% card.with_header do %>
          <%= t("show.cards.display") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Room.human_attribute_name(:position) %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= @room.position %></dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:display_on_home_page) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <span><%= t("boolean.#{@room.display_on_home_page}") %></span>
          </dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:status) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <%= render @room.decorated.status_to_badge_component %>
          </dd>
        </dl>
      <% end %>
    </div>
  </div>

  <%= render CardComponent.new(extra_classes: "bg-body-tertiary mt-4") do |card| %>
    <% card.with_header do %>
      <%= t("show.cards.visualization") %>
    <% end %>

    <div class="overview row row-cols-1 row-gap-4">
      <div class="col">
        <%= render CardComponent.new do |card| %>
          <% islets = @room.islets.sorted %>
          <% islets.each_with_index do |islet, i| %>
            <div class="<%= class_names("islet", "pt-4": i > 0, "pt-2 px-2": islets.length == 1) %>">
              <% if islet.name.present? %>
                <h6 class="mb-2">
                  <%= render BadgeComponent.new(color: :primary) do %>
                    <%= link_to("Ilot #{islet}", visualization_room_path(@room, islet: islet.name, view: params[:view], bg: params[:bg])) %>
                  <% end %>
                </h6>
              <% end %>
              <%= render "bays/overview", bays: islet.decorated.overviewed_bays_array, islet: islet.name %>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>
  <% end %>

  <%= render HasManyTurboFrameComponent.new(
    Islet.model_name.human.pluralize,
    url: islets_path(room_ids: @room.id),
    frame_id: dom_id(Islet, :table),
    new_path: new_islet_path(islet: { room_id: @room.id }),
    new_label: t("islets.add_new")
  ) %>

  <%= render ChangelogEntries::ObjectListComponent.new(@room) %>
</div>
