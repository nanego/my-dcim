<%
  provide(:title, "#{Room.model_name.human.pluralize} | #{@room.name}")

  breadcrumb_steps = {
    Room.model_name.human.pluralize => rooms_path,
    @room.name => ""
  }
%>

<%= render Page::HeadingShowComponent.new(resource: @room,
                                          title: "#{Room.model_name.human} #{@room.name}",
                                          breadcrumb_steps:) do |heading| %>
  <%= heading.with_extra_buttons do %>
   <% render ButtonComponent.new(t("visualization.title"),
                                 url: visualization_room_path(@room),
                                 variant: :primary,
                                 icon: "diagram-3-fill",
                                 is_responsive: true,
                                 extra_classes: "me-2") %>
  <% end %>
<% end %>

<div class="col-12 p-4 border-top">
  <div class="row row-cols-1 row-cols-lg-2 row-gap-4">
    <div class="col">
      <%= render CardComponent.new do |card| %>
        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <% %i[name description].each do |attribute_name| %>
            <dt class="pb-2"><%= Room.human_attribute_name(attribute_name) %></dt>
            <dd class="mb-0 pb-2 ps-3"><%= @room.public_send(attribute_name) %></dd>
          <% end %>

          <dt class="pb-2"><%= Room.human_attribute_name(:surface_area) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <% if @room.surface_area.present? %>
              <%= surface_area_with_suffix(@room.surface_area) %>
            <% end %>
          </dd>
        </dl>
      <% end %>

      <!-- Card shown on lg, in 2nd position (Grid isn't working as Masonry) -->
      <%= render CardComponent.new(extra_classes: "d-none d-lg-flex mt-4") do |card| %>
        <% card.with_header do %>
          <%= t("display") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Room.human_attribute_name(:position) %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= @room.position %></dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:display_on_home_page) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <span><%= t("boolean.#{@room.display_on_home_page}") %></span>
          </dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:status) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <span class="badge rounded-pill <%= @room.decorated.badge_color_for_status %>">
              <%= Room.human_attribute_name("status.#{@room.status}") %>
            </span>
          </dd>
        </dl>
      <% end %>
    </div>

    <div class="col">
      <%= render CardComponent.new(type: :primary) do |card| %>
        <% card.with_header do %>
          <%= t("layouts.sidebar.location.title") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Site.model_name.human %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= link_to @room.site, site_path(@room.site) %></dd>
        </dl>
      <% end %>
    </div>

    <!-- Card shown on mobile, in 3rd position (Grid isn't working as Masonry) -->
    <div class="col d-lg-none">
      <%= render CardComponent.new do |card| %>
        <% card.with_header do %>
          <%= t("display") %>
        <% end %>

        <dl class="show-page_dl d-grid row-gap-2 mb-0">
          <dt class="pb-2"><%= Room.human_attribute_name(:position) %></dt>
          <dd class="mb-0 pb-2 ps-3"><%= @room.position %></dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:display_on_home_page) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <span><%= t("boolean.#{@room.display_on_home_page}") %></span>
          </dd>

          <dt class="pb-2"><%= Room.human_attribute_name(:status) %></dt>
          <dd class="mb-0 pb-2 ps-3">
            <span class="badge rounded-pill <%= @room.decorated.badge_color_for_status %>">
              <%= Room.human_attribute_name("status.#{@room.status}") %>
            </span>
          </dd>
        </dl>
      <% end %>
    </div>
  </div>

  <%= render HasManyTurboFrameComponent.new(
    Islet.model_name.human.pluralize, url: islets_path(room_id: @room.id), frame_id: dom_id(Islet, :table)
  ) %>
  <%= render ChangelogEntries::ObjectListComponent.new(@room) %>
</div>
