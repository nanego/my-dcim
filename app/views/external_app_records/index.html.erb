<% 
  breadcrumb
    .add(Server.model_name.human, servers_path)
    .add(t(".title"))
%>

<%= render Page::HeadingComponent.new(
  title: t(".title"), breadcrumb:, back_button_url: servers_path
) do |heading| %>
  <% heading.with_right_content do %>
    <div class="d-flex align-self-center column-gap-2">
      <%= button_to sync_with_glpi_external_app_records_path,
                    id: "sync_with_glpi_button",
                    class: "btn btn-outline-primary d-inline-block",
                    title: t(".start_synchronization"),
                    remote: true,
                    method: :put do %>
        <i class="bi bi-arrow-repeat"></i>
        <span class="ms-2 d-none d-md-inline-flex"><%= t(".start_synchronization") %></span>
      <% end %>

      <%= render ButtonComponent.new(t(".configuration"),
                                     url: settings_external_app_records_path,
                                     variant: :secondary,
                                     icon: "gear",
                                     is_responsive: true) %>
    </div>
  <% end %>
<% end %>

<div class="p-4 border-top d-flex flex-column row-gap-4">
  <div class="alert alert-primary mb-0" role="alert" id="sync_alert">
    <div id="sync_latest_text">
      <i class="bi bi-info-circle-fill me-2"></i>
      <span>
        <span class="fst-italic">
          <%= t(".last_complete_synch") %>
          <%- if date = ExternalAppRequest.completed.order('updated_at desc').limit(1).pluck(:updated_at).last %>
            <%= l(date) %>
          <%- else %>
            <%= t(".none")%>
          <%- end %>
        </span>
        <hr>
        <span class="d-inline-flex"><%= t(".synchronised_categories_list", categories: @synchronised_categories) %></span>
      </span>
    </div>

    <div id="current_sync_status" class="d-none">
      <span id="current_sync_status_label"><%= t(".synchronizing") %></span>
      <span class="progress mt-2">
        <span id="current_sync_progress_bar"
              class="progress-bar progress-bar-striped"
              role="progressbar"
              aria-valuenow="0%"
              aria-valuemin="0"
              aria-valuemax="100"
              style="width: 0%"></span>
      </span>
    </div>
  </div>

  <%= render FilterComponent.new(@filter) do |c| %>
    <% c.with_form do |f| %>
      <div>
        <fieldset class="form-floating">
          <%= f.collection_select(:frame_ids, Frame.order(:name),
                                  :id,
                                  :name,
                                  { prompt: true, multiple: true },
                                  { class: "form-select", data: { controller: :select } }) %>
          <%= f.label :external_app_record_frame_ids %>
        </fieldset>
      </div>

      <div>
        <fieldset class="form-floating">
          <%= f.select(:external_serial_status,
                       ExternalAppRecordDecorator.external_serial_status_options_for_select,
                       { prompt: true },
                       { class: "form-select", data: { controller: :select } }) %>
          <%= f.label :external_serial_status %>
        </fieldset>
      </div>

      <div>
        <fieldset class="form-floating">
          <%= f.collection_select(:modele_ids, Modele.order(:name),
                                  :id,
                                  :name,
                                  { prompt: true, multiple: true },
                                  { class: "form-select", data: { controller: :select } }) %>
          <%= f.label :modele_ids %>
        </fieldset>
      </div>

      <div>
        <fieldset class="form-floating">
          <%= f.text_field :server_name, class: "form-control", placeholder: t("filters.placeholder.search") %>
          <%= f.label :server_name %>
        </fieldset>
      </div>
    <% end %>
  <% end %>

  <%= render List::DataTableComponent.new(@external_app_records) do |table| %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:id), sort_by: :server_id) do |record| %>
      <%= link_to record.server_id, server_path(record.server) %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:server_id), sort_by: :"servers.name") do |record| %>
      <%= link_to record.server, server_path(record.server) %>
    <% end %>
    <% table.with_column(Server.human_attribute_name(:numero), sort_by: :"servers.numero") do |record| %>
      <%= record.server.numero %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:external_serial_status),
                         sort_by: :external_serial,
                         text_align: :center) do |record| %>
      <%= render record.decorated.external_serial_to_badge_component %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:external_name), sort_by: :external_name) do |record| %>
      <%= record.external_name %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:external_id), sort_by: :external_id) do |record| %>
      <%= record.external_id %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:external_serial),
                         sort_by: :external_serial) do |record| %>
      <%= record.external_serial %>
    <% end %>
    <% table.with_column(ExternalAppRecord.human_attribute_name(:frame_id), sort_by: :"frames.name") do |record| %>
      <%= record.frame %>
    <% end %>
  <% end %>

  <% if @pagy.pages > 1 %>
    <%== pagy_bootstrap_nav(@pagy) %>
  <% end %>
</div>

<script>
  //<![CDATA[
  $(document).ready(function () {

    document.getElementById('sync_with_glpi_button').addEventListener('click', function (event) {
      event.preventDefault();
      fetch('<%= sync_with_glpi_external_app_records_path %>', {
        method: 'PUT'
      }).then(response => response.json())
        .then(data => {
          const requestId = data.request_id;
          displaySyncStatus(requestId);
        });
    });

    <% current_request = ExternalAppRequest.in_progress.first %>
    <% if current_request %>
    displaySyncStatus(<%= current_request.id %>);
    document.getElementById('current_sync_status').innerHTML += '<%= button_to('Annuler',
                external_app_request_path(current_request),
                class: "btn btn-danger",
                method: :delete) if current_request.created_at < 5.minutes.ago(Time.now) %>';
    <% end %>
  });

  function displaySyncStatus(requestId) {
    document.getElementById('current_sync_status').classList.remove("d-none");
    document.getElementById('sync_latest_text').classList.add("d-none");

    checkRequestProgress(requestId);
  }

  function checkRequestProgress(requestId) {
    fetch(`/external_app_requests/${requestId}`)
      .then(response => response.json())
      .then(data => {
        document.getElementById('current_sync_progress_bar').style.width = data.progress + '%';
        if (data.status === 'completed') {
          document.getElementById('current_sync_status_label').innerText = 'Synchronisation terminée. Rechargez la page pour consulter les nouvelles données.';
          document.getElementById('current_sync_progress_bar').classList.add('bg-success');
          document.getElementById('sync_alert').classList.replace('alert-primary', 'alert-success');
        } else {
          if (data.status === 'failed') {
            document.getElementById('current_sync_status_label').innerText = 'Synchronisation en erreur';
            document.getElementById('current_sync_progress_bar').classList.add('bg-danger');
            document.getElementById('sync_alert').classList.replace('alert-primary', 'alert-danger');
          } else {
            setTimeout(() => checkRequestProgress(requestId), 1000);
          }
        }
      });
  }

  //]]>
</script>
