<%
  title = t("rooms.infrastructure_view.title")
  breadcrumb_steps = { t("visualization.title") => overview_rooms_path, title => nil }

  provide(:title, title)
%>

<%= render Page::HeadingComponent.new(title:, breadcrumb_steps:) %>

<div data-turbo="true">
  <div class="p-4 border-top d-flex flex-column row-gap-4">
    <%= render CardComponent.new(type: :primary, extra_classes: "bg-body-tertiary") do |card| %>
      <%= form_with model: @filter, url: "", method: :get, class: "row g-3 align-items-center", id: :filters,
                    data: { controller: "form-update" , turbo_frame: :infrastructure_islet, turbo_action: :advance } do |f| %>
        <div class="col-2">
          <fieldset class="form-floating">
            <%= f.select :network_type, Modele::Network::TYPES.excluding("fiber").map { |t| [Modele.human_attribute_name("network_types.short_#{t}"), t] }, {}, { class: "form-control", data: { action: "change->form-update#update" } } %>
            <%= f.label :network_type %>
          </fieldset>
        </div>

        <div class="col-4">
          <fieldset class="form-floating">
            <%= f.select :islet_id, IsletDecorator.grouped_by_sites_options_for_select, { prompt: true }, { class: "form-control", data: { action: "change->form-update#update" } } %>
            <%= f.label :islet_id %>
          </fieldset>
        </div>

        <div class="col-2 visually-hidden">
          <%= f.submit t("action.apply"), class: "btn btn-primary btn-lg", form: :filters %>
        </div>
      <% end %>
    <% end %>

    <% if turbo_frame_request? %>
      <%= turbo_frame_tag "infrastructure_islet" do %>
        <%= render partial: "islets/infrastructure", locals: {
          bays: @bays, network: @filter.network_type, room: @room, islet: @islet, hub: @hub,
          second_hub: @second_hub, second_room: @second_room, connections: @connections, concentrateurs_ids: @concentrateurs_ids
        } %>
      <% end %>
    <% else %>
      <%= turbo_frame_tag "infrastructure_islet", src: visualization_infrastructure_path(**@filter.to_h) do %>
        <div class="room_overview show_room rooms-infrastructure" id="network-capacity">
          <div class="card">
            <div class="card-body bg-body-tertiary p-4">
              <div class="d-flex align-items-center justify-content-center gap-3">
                <strong role="status"><%= t(".loading") %></strong>
                <div class="spinner-grow text-primary" aria-hidden="true"></div>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    <% end %>
  </div>
</div>

<script>
  var lines = []
  var current_connections = []

  document.addEventListener("turbo:before-frame-render", function() {
    lines.forEach(function (line) {
      line.remove()
    })
    lines = []
    current_connections = []
  })

  document.addEventListener("turbo:frame-render", function () {
    drawCurrentLines()

    $(".infrastructure").on('scroll', AnimEvent.add(function() {
      lines.forEach(function (line) {
        line.position()
      })
    }))
  })

  $(document).ready(function() {
    LeaderLine.positionByWindowResize = false

    window.addEventListener("resize", function () {
      lines.forEach(function (line) {
        line.position()
      })
    })

    $("main.mydcim-main").on("scroll", AnimEvent.add(function() {
      lines.forEach(function (line) {
        line.position()
      })
    }))
  })

  $('body').on('click', '#infrastructure_filters input:checkbox[name="stack_ids[]"]', function (e) {
    resetLines()
  })

  function disabled_colors() {
    return $('#infrastructure_filters input:checkbox[name="stack_ids[]"]:not(:checked)').map(function () {
      return $(this).data("color");
    }).get()
  }

  function resetLines() {
    deleteOldLines()
    drawCurrentLines()
  }

  function deleteOldLines() {
    lines.forEach(function (line) {
      line.hide()
    })
    lines = []
    current_connections = []
  }

  function drawLine(startElement, endElement, params) {
    if (startElement && endElement) {
      lines.push(new LeaderLine(startElement, endElement, params))
    }
  }

  function drawInterSwitchsConnections(start_id, end_id, color) {
    if (start_id != end_id && current_connections.indexOf(end_id + "-" + start_id) < 0) {
      var start_element = $('.server_' + start_id + ':visible')[0]
      var end_element = $('.server_' + end_id + ':visible')[0]
      // var start_anchor = LeaderLine.pointAnchor(start_element, {x: 42 + i * 20, y: 57})
      // var end_anchor = LeaderLine.pointAnchor(end_element, {x: 42 + i * 20, y: 0})
      if (start_element && end_element) {
        setParamsAndDraw(start_element, end_element, color)
        if (!$(start_element).hasClass('hub_material')) {
          current_connections.push(start_id + "-" + end_id)
        }
        // log(start_id + ' <-> ' + end_id)
      }
    }
  }

  function setParamsAndDraw(start_element, end_element, color) {
    var params

    if (color) {
      color = colors_hash[color]
    } else {
      color = 'gray'
    }

    if ($(start_element).hasClass('hub-top') && !($(end_element).hasClass('hub-bottom')) ||
      $(start_element).hasClass('hub-bottom') && !($(end_element).hasClass('hub-top'))) {
      // HUB TO SWITCHS
      end_element = LeaderLine.pointAnchor(end_element, {x: 5, y: 0})
      params = {
        path: 'fluid',
        startPlug: 'behind',
        endPlug: 'behind',
        startSocket: 'bottom',
        endSocket: 'top',
        color: color,
        size: 3,
        dash: true
      }
    }

    if ($(start_element).hasClass('lane-1') && $(end_element).hasClass('lane-1') ||
      $(start_element).hasClass('lane-2') && $(end_element).hasClass('lane-2')) {
      // SWITCH TO SWITCH - SAME LINE
      params = {
        path: 'fluid',
        startPlug: 'behind',
        endPlug: 'behind',
        startSocket: 'bottom',
        endSocket: 'bottom',
        color: color,
        size: 2,
        dash: false
      }
    }

    if ($(start_element).hasClass('hub-top') && ($(end_element).hasClass('hub-bottom')) ||
      $(start_element).hasClass('hub-bottom') && ($(end_element).hasClass('hub-top'))) {
      // HUB TO HUB
      if ($(start_element).hasClass('hub-top')) {
        start_element = LeaderLine.pointAnchor(start_element, {x: $(start_element).outerWidth(), y: 19})
        end_element = LeaderLine.pointAnchor(end_element, {x: 0, y: 19})
      } else {
        start_element = LeaderLine.pointAnchor(start_element, {x: 0, y: 38})
        end_element = LeaderLine.pointAnchor(end_element, {x: $(end_element).outerWidth(), y: 38})
      }
      params = {
        path: 'straight',
        startPlug: 'behind',
        endPlug: 'behind',
        color: color,
        size: 2
      }
    }

    // Default
    if (!params) {
      log(start_element)
      log(end_element)
      params = {
        path: 'arc',
        startPlug: 'behind',
        endPlug: 'behind',
        startSocket: 'top',
        endSocket: 'bottom',
        color: color,
        size: 2
      }
    }

    drawLine(start_element, end_element, params)
  }
</script>
