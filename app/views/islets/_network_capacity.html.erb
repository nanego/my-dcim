<% # TODO: create a component to represent a bay %>
<div class="room_overview show_room rooms-network-capacity" id="network-capacity">
  <div class="card">
    <div class="card-body d-flex">
      <div class="tab-content capacity bg-body-tertiary w-100">
        <div class="islet">
          <div>
            <div class="rooms-overview">
              <% bays.each do |bay| %>
                <% if (frames = bay.frames.sorted).any? %>
                  <div class="couple" style="grid-column: <%= "#{bay.position}/#{bay.position+1}" %>;
                    grid-row: <%= "#{bay.lane.to_i}/#{bay.lane.to_i+1}" %>;">
                    <% frames.each_with_index do |frame, index| %>
                      <% # TODO: move in the action or a model method %>
                      <% servers = frame.servers.includes(:bay, :stack, modele: { enclosures: :composants },
                                                                        cards:  [{ card_type: :port_type }, { ports: :cable }])
                              .where("servers.network_types @> ?", "{#{network}}") # Switch LAN
                      %>
                      <div class="overviewed_frame bg-body text-body-emphasis <%= 'no-margin' if index > 0 %>"
                            data-bay-id="<%= bay.id %>" data-frame-id="<%= frame.id %>">
                        <div class="title bg-success-subtle">
                          <%= link_to frame.name, visualization_room_path(room,
                                                            view: params[:view],
                                                            islet: islet.name,
                                                            'bay-id': bay.id,
                                                            'frame-id': frame),
                                                  class: "link-body-emphasis", target: :_top %>
                        </div>

                        <ul>
                          <% servers.each do |server| %>
                            <% cache ["server", server.id, server.updated_at, Port.maximum(:updated_at)] do %>
                              <% data = { :url => server_url(server) } %>
                              <%= tag.li class: "server_#{server.id}
                                              lane-#{server.bay.lane}
                                              truncate
                                              #{"bordered" if server != servers.last}",
                                          title: h("#{server.name}"),
                                          data: data do %>
                                <% if server.modele.present? %>
                                  <% server.modele.enclosures.each do |enclosure| %>
                                    <% cards = server.cards %>
                                    <% components_per_enclosure = enclosure.composants.reject { |c| c.name&.downcase == "alim" } %>
                                    <% if enclosure.display != 'horizontal' %>
                                      <table>
                                        <tr>
                                          <% components_per_enclosure.each do |component| %>
                                            <td class="slot_column border-0">
                                              <% cards.select { |card| card.composant_id == component.id }.each do |card| %>
                                                <%= render partial: 'rooms/capacity_component', locals: { server: server, component: component, card: card } %>
                                              <% end %>
                                            </td>
                                          <% end %>
                                        </tr>
                                      </table>
                                      <span class="sum">
                                      <%= cards.sum { |c| c.cables.size } %> /
                                        <%= cards.sum { |c| c.port_quantity } %>
                                    </span>
                                    <% else %>
                                      <% components_per_enclosure.each do |component| %>
                                        <% cards.select { |card| card.composant_id == component.id }.each do |card| %>
                                          <%= render partial: 'rooms/capacity_component', locals: { server: server, component: component, card: card } %>
                                          <span class="sum">
                                          <%= card.cables.size %> /
                                            <%= card.port_quantity %>
                                        </span>
                                        <% end %>
                                      <% end %>
                                    <% end %>
                                  <% end %>
                                  <%= link_to server_path(server, :view => params[:view]),
                                              class: 'float-end server_name link-body-emphasis', data: { controller: "tooltip", bs_placement: "top" }, title: server.numero, target: :_top do %>
                                      <small><%= h(server.name) %></small>
                                  <% end %>
                                <% end %>
                              <% end %>
                            <% end %>
                          <% end %>
                        </ul>
                      </div>
                    <% end %>
                  </div>
                <% end %>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="loader-overlay position-absolute w-100 h-100 z-3">
      <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden"><%= t("visualization.network_capacities.show.loading") %></span>
        </div>
      </div>
    </div>
  </div>
</div>
