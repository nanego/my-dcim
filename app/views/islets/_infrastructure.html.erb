<div class="room_overview show_room rooms-network-capacity" id="network-capacity">
  <div class="card">
    <div class="card-body d-flex">
      <div class="tab-content infrastructure bg-body-tertiary overflow-x-scroll w-100">
        <% # TODO: move html here? %>
        <div class="islet">
          <% if room.id == 4 || room.id == 3 %>
            <div class="hubs">
              <% bgColorHub1 = define_background_color(server: hub, mode: params["bg"]) %>
              <div class="hub_material hub-top server_<%= hub.id %>"
                   id="hub1-<%= room.id %>-<%= islet %>"
                   style="background-color: <%= bgColorHub1 %>"
                   data-url="<%= server_path(hub) %>">
                <%= link_to server_path(hub), class: "link-dark", target: :_blank, rel: :noopener do %>
                  Concentrateur
                  <br>
                  <%= hub %>
                <% end %>
              </div>
              <div class="other_room_hub">
                <% bgColorHub2 = define_background_color(server: second_hub, mode: params["bg"]) %>
                <span style="color: grey;"><%= second_room %></span>
                <div class="hub_material hub-bottom ms-1 server_<%= second_hub.id %>"
                     data-url="<%= server_path(second_hub) %>"
                     style="background-color: <%= bgColorHub2 %>"
                     id="hub2-<%= room.id %>-<%= islet %>">
                  <%= link_to server_path(second_hub), class: "link-dark",
                                                                           target: :_blank, rel: :noopener do %>
                    Concentrateur
                    <br>
                    <%= second_hub %>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
          <div>
            <div class="rooms-overview">
              <% islet.bays.sorted.each do |bay| %>
                <div class="couple" style="grid-column: <%= "#{bay.position}/#{bay.position+1}" %>;
                    grid-row: <%= "#{bay.lane.to_i}/#{bay.lane.to_i+1}" %>;">
                  <% bay.frames.sorted.each_with_index do |frame, index| %>
                    <% servers = frame.servers.includes(:bay, :modele, :stack)
                                      .where("servers.network_types @> ?", "{#{network}}") # Switch LAN %>
                    <div class="<%= class_names("overviewed_frame bg-secondary-subtle border-secondary-subtle border",
                                                "no-margin": index > 0) %>"
                         data-bay-id="<%= bay.id %>" data-frame-id="<%= frame.id %>">
                      <div id="frame-<%= frame.id %>-pre"
                           class="<%= class_names("intermediate-point pre", even: bay.lane.to_i.even?,
                                                                            odd: bay.lane.to_i.odd?) %>"
                           style="z-index: -3000;">.</div>
                      <div class="title">
                        <%= link_to frame.name, visualization_room_path(room,
                                                          view: params[:view],
                                                          islet: islet.name,
                                                          "bay-id": bay.id,
                                                          "frame-id": frame,
                                                          bg: params[:bg]),
                                                class: "link-body-emphasis", target: :_top %>
                      </div>
                      <div id="frame-<%= frame.id %>-post"
                           class="<%= class_names("intermediate-point post", even: bay.lane.to_i.even?,
                                                                             odd: bay.lane.to_i.odd?) %>"
                           style="z-index: -3000;">.</div>
                      <ul>
                        <% servers.each do |server| %>
                        <% bgModeleColor = define_background_color(server: server, mode: params["bg"]) %>
                          <% data = { url: server_url(server) } %>
                          <%= tag.li class: class_names("server_#{server.id} lane-#{server.bay.lane} truncate",
                                                        bordered: server != servers.last),
                                     style: "direction:rtl;background-color:#{bgModeleColor} !important;
                                             #{"border: 2px solid ##{server.stack.color};" if server.stack.present?}",
                                     title: h("#{server.name}"),
                                     data: data do
                            link_to server.name, server_path(server), class: "link-dark",
                                                                      target: :_blank, rel: :noopener
                          end %>
                        <% end %>
                      </ul>
                    </div>
                  <% end %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="card-footer bg-body-secondary">
      <div id="infrastructure_filters" class="py-2">
        <%= Stack.model_name.human.pluralize %> :
        <% Stack.select(:id, :color).each do |stack| %>
          <%= check_box_tag "stack_ids[]", stack.id, 1, value: stack.id, data: { color: "\##{stack.color}" } %>
          <span style="<%= "color: ##{stack.try(:color)}" %>"
                class="bi bi-square-fill me-2"
                aria-hidden="true"></span>
        <% end %>
      </div>
    </div>
    <div class="loader-overlay position-absolute w-100 h-100 z-3">
      <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden"><%= t("visualization.infrastructures.show.loading") %></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function drawCurrentLines() {
    var disabled_stacks = disabled_colors()

    <% connections.each do |server_id, connections| %>
      <% connections.each do |connection| %>
        <% unless concentrateurs_ids.include?(connection[:server_id]) && concentrateurs_ids.exclude?(server_id)  %>
          if(disabled_stacks.indexOf(colors_hash['<%= connection[:cable_color] %>']) < 0) {
            drawInterSwitchsConnections('<%= server_id %>', '<%= connection[:server_id] %>', '<%= connection[:cable_color] %>')
          }
        <% end %>
      <% end %>
    <% end %>
  }
</script>
